# Docker Compose con Nginx como Reverse Proxy
# Archivo: docker-compose.nginx.yml

version: '3.8'

services:
  # Aplicación web
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: confirmacion-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./external/catequesis:/app/external/catequesis:ro
    networks:
      - app-network
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: confirmacion-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Configuraciones de Nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      
      # Certificados SSL (Let's Encrypt)
      - ./nginx/ssl:/etc/letsencrypt:ro
      
      # Logs
      - ./nginx/logs:/var/log/nginx
      
      # Cache
      - nginx-cache:/var/cache/nginx
    networks:
      - app-network
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"

  # Certbot para certificados SSL automáticos
  certbot:
    image: certbot/certbot:latest
    container_name: confirmacion-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@tu-dominio.com --agree-tos --no-eff-email -d confirmacion.tu-dominio.com -d www.confirmacion.tu-dominio.com
    profiles:
      - certbot

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  nginx-cache:
    driver: local